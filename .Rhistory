library(knitr)
library(mapview)
devtools::install_github("r-spatial/sf")
devtools::install_github("r-spatial/sf")
library(sf)
library(devtools)
devtools::install_github("r-spatial/sf")
library(sf)
devtools::install_github("ropensci/osmdata")
library(osmdata)
library(raster)
devtools::install_github("tidyverse/ggplot2")
library(ggplot2)
library(rgeos)
library(maptools)
library(rgdal)
library(rgeos)
library(data.table)
library(knitr)
library(mapview)
install.packages("maptools")
library(devtools)
devtools::install_github("r-spatial/sf")
library(sf)
devtools::install_github("ropensci/osmdata")
library(osmdata)
library(raster)
devtools::install_github("tidyverse/ggplot2")
library(ggplot2)
library(rgeos)
library(maptools)
library(rgdal)
library(rgeos)
library(data.table)
library(knitr)
library(mapview)
install.packages("raster")
install.packages("knitr")
library(devtools)
devtools::install_github("r-spatial/sf")
library(sf)
devtools::install_github("ropensci/osmdata")
library(osmdata)
library(raster)
devtools::install_github("tidyverse/ggplot2")
library(ggplot2)
library(rgeos)
library(maptools)
library(rgdal)
library(rgeos)
library(data.table)
library(knitr)
library(mapview)
install.packages("rgeos")
install.packages("rgdal")
library(devtools)
devtools::install_github("r-spatial/sf")
library(sf)
devtools::install_github("ropensci/osmdata")
library(osmdata)
library(raster)
devtools::install_github("tidyverse/ggplot2")
library(ggplot2)
library(rgeos)
library(maptools)
library(rgdal)
library(rgeos)
library(data.table)
library(knitr)
library(mapview)
install.packages("data.table")
install.packages("mapview")
install.packages("svglite")
install.packages("svglite")
library(mapview)
install.packages("mapview")
roads <- readRDS("~/github/london_osm_canyons/london_roads_output.rds")
library(devtools)
suppressMessages(devtools::install_github("r-spatial/sf"))
library(sf)
suppressMessages(devtools::install_github("ropensci/osmdata"))
suppressMessages(library(osmdata))
suppressMessages(library(raster))
suppressMessages(devtools::install_github("tidyverse/ggplot2"))
library(ggplot2)
library(rgeos)
library(maptools)
library(rgdal)
library(rgeos)
library(data.table)
library(knitr)
library(mapview)
library(RCurl)
library(stplanr)
library(devtools)
suppressMessages(devtools::install_github("r-spatial/sf"))
library(sf)
suppressMessages(devtools::install_github("ropensci/osmdata"))
suppressMessages(library(osmdata))
suppressMessages(library(raster))
suppressMessages(devtools::install_github("tidyverse/ggplot2"))
library(ggplot2)
library(rgeos)
library(maptools)
library(rgdal)
library(rgeos)
library(data.table)
library(knitr)
library(mapview)
library(RCurl)
library(stplanr)
london_raster <- raster('buildings_raster/UK001L2_LONDON_UA2012_DHM/UK001L2_LONDON_UA2012_DHM.tif')
extent              <- extent(london_raster)
extent              <- as(extent, 'SpatialPolygons')
proj4string(extent) <- crs(london_raster)
latlong             <- CRS("+init=epsg:4326")
extent              <- spTransform(extent, latlong)
min_x   <- extent(extent)[1]
max_x   <- extent(extent)[2]
min_y   <- extent(extent)[3]
max_y   <- extent(extent)[4]
rm(extent)
head(roads)
residential           <- opq(bbox = c(min_x, min_y, max_x, max_y)) %>% add_osm_feature(key = 'highway', value='residential') %>% osmdata_sf()
residential           <- residential$osm_lines[,c('osm_id', 'oneway', 'lanes', 'geometry')]
residential$type      <- 'residential'
residential$osm_id      <- as.numeric(as.character(residential$osm_id))
residential$lanes       <- as.character(residential$lanes)
residential             <- roads[!grepl(';', residential$lanes),]
residential$lanes       <- as.numeric(residential$lanes)
residential[is.na(residential$lanes),'lanes'] <- 2
residential$width                           <- residential$lanes * 3.15
residential$half_of_one                     <- NA
residential$pavement_width                  <- 6
residential$total_width                     <- residential$width + residential$pavement_width
residential$weighted_mean                   <- NA
residential$cell_count                      <- NA
residential$zero_cells                      <- NA
head(residential)
test <- head(residential)
test$geometry
line_bearing(test)
test$bearing <-  line_bearing(test)
test
residential$bearing                         <- NA
residential$height_width_ratio              <- NA
residential$max_height                      <- NA
residential$non_zero_means                  <- NA
residential$height_width_ratio_excl_zeros   <- NA
residential$classification                  <- 6
head(residential)
names(roads)
col_order <- names(roads)
residential[,col_order]
residential <- residential[,col_order]
roads <- rbind(roads, residential)
head(roads)
tail(roads)
roads <- readRDS("~/github/london_osm_canyons/london_roads_output.rds")
names(roads)
names(residential)
lapply(residential, class
)
lapply(residential, class) == lapply(roads, class)
lapply(rdential, class)
lapply(resdential, class)
lapply(residential, class)
lapply(roads, class)
residential$half_of_one                     <- as.character(NA)
residential           <- opq(bbox = c(min_x, min_y, max_x, max_y)) %>% add_osm_feature(key = 'highway', value='residential') %>% osmdata_sf()
residential           <- residential$osm_lines[,c('osm_id', 'oneway', 'lanes', 'geometry')]
residential$type      <- 'residential'
residential$osm_id      <- as.numeric(as.character(residential$osm_id))
residential$lanes       <- as.character(residential$lanes)
residential             <- roads[!grepl(';', residential$lanes),]
residential$lanes       <- as.numeric(residential$lanes)
residential[is.na(residential$lanes),'lanes'] <- 2
residential$width                           <- residential$lanes * 3.15
residential$half_of_one                     <- as.character(NA)
residential$pavement_width                  <- as.numeric(6)
residential$total_width                     <- as.numeric(residential$width + residential$pavement_width)
residential$weighted_mean                   <- as.numeric(NA)
residential$cell_count                      <- as.integer(NA)
residential$zero_cells                      <- as.integer(NA)
residential$bearing                         <- as.numeric(NA)
residential$height_width_ratio              <- as.numeric(NA)
residential$max_height                      <- as.numeric(NA)
residential$non_zero_means                  <- as.numeric(NA)
residential$height_width_ratio_excl_zeros   <- as.numeric(NA)
residential$classification                  <- as.numeric(6)
col_order <- names(roads)
residential <- residential[,col_order]
joined <- rbind(roads, residential)
tail(joined)
tail(residential)
head(residential)
head(roads)
plot(roads[1,])
plot(roads[1,]$geometry)
plot(residential$geometry, add=T)
mapview(roads[1,])
mapview(roads[1,]) %>% addFeatures(residential[1,])
mapview(roads[1,]) %>% addFeatures(residential[1,])
mapview(roads[1,])
mapview(residential[1,])
rm(test)
residential           <- opq(bbox = c(min_x, min_y, max_x, max_y)) %>% add_osm_feature(key = 'highway', value='residential') %>% osmdata_sf()
rm(joined)
residential           <- residential$osm_lines[,c('osm_id', 'oneway', 'lanes', 'geometry')]
residential$type      <- 'residential'
tail(residential)
roads[roads$osm_id == 595521190,]
roads[is.na(roads$osm_id),]
residential$osm_id      <- as.numeric(as.character(residential$osm_id))
roads[is.na(roads$osm_id),]
tail(residential)
esidential$lanes       <- as.character(residential$lanes)
residential$lanes       <- as.character(residential$lanes)
residential             <- residential[!grepl(';', residential$lanes),]
residential$lanes       <- as.numeric(residential$lanes)
residential[is.na(residential$lanes),'lanes'] <- 2
residential$width                           <- residential$lanes * 3.15
residential$half_of_one                     <- as.character(NA)
residential$pavement_width                  <- as.numeric(6)
residential$total_width                     <- as.numeric(residential$width + residential$pavement_width)
residential$weighted_mean                   <- as.numeric(NA)
residential$cell_count                      <- as.integer(NA)
residential$zero_cells                      <- as.integer(NA)
residential$bearing                         <- as.numeric(NA)
residential$height_width_ratio              <- as.numeric(NA)
residential$max_height                      <- as.numeric(NA)
residential$non_zero_means                  <- as.numeric(NA)
residential$height_width_ratio_excl_zeros   <- as.numeric(NA)
residential$classification                  <- as.numeric(6)
col_order <- names(roads)
residential <- residential[,col_order]
joined <- rbind(roads, residential)
tail(joined)
roads <- rbind(roads, residential)
rm(joined)
rm(residential)
head(roads)
st_write(roads, 'final_roads_london.geojson')
rm(list=ls())
### Loading libraries
library(raster)
library(rgdal)
library(rgeos)
library(ggplot2)
library(sf)
library(rmarkdown)
setwd('/home/james/github/uk_cmaq_air_quality_index')
latlong                   <- "+init=epsg:4326"
ukgrid                    <- "+init=epsg:27700"
google                    <- "+init=epsg:3857"
## read in the raster files and UK shapefile
pm25                      <- raster('cmaq_runs/Annual_CMAQUrban_PM25_2012.grd')
no2                       <- raster('cmaq_runs/Annual_CMAQUrban_NO2_2012.grd')
latlong                   <- "+init=epsg:4326"
ukgrid                    <- "+init=epsg:27700"
google                    <- "+init=epsg:3857"
## read in the raster files and UK shapefile
pm25                      <- raster('cmaq_runs/Annual_CMAQUrban_PM25_2012.grd')
no2                       <- raster('cmaq_runs/Annual_CMAQUrban_NO2_2012.grd')
latlong                   <- "+init=epsg:4326"
ukgrid                    <- "+init=epsg:27700"
google                    <- "+init=epsg:3857"
## read in the raster files and UK shapefile
pm25                      <- raster('cmaq_runs/Annual_CMAQUrban_PM25_2012.grd')
no2                       <- raster('cmaq_runs/Annual_CMAQUrban_NO2_2012.grd')
eng_scot_wales <- st_read('eng_scot_wales_conc_averages.geojson')
eng_scot_wales <- st_set_srid(eng_scot_wales, proj4string(pm25))
eng_scot_wales <- st_set_crs(eng_scot_wales, proj4string(pm25))
## Our two examples
leicester                 <- as(eng_scot_wales[eng_scot_wales$name == 'Leicester',], 'Spatial')
westminster               <- as(eng_scot_wales[eng_scot_wales$name == 'Westminster',], 'Spatial')
pm25_leicester            <- crop(pm25, leicester)
pm25_leicester            <- mask(pm25_leicester, leicester)
pm25_westminster          <- crop(pm25, westminster)
pm25_westminster          <- mask(pm25_westminster, westminster)
no2_leicester             <- crop(no2, leicester)
no2_leicester             <- mask(no2_leicester, leicester)
no2_westminster           <- crop(no2, westminster)
no2_westminster           <- mask(no2_westminster, westminster)
## Get countrywide means
country_mean_pm25         <- mean(eng_scot_wales$mean_pm25)
country_mean_no2          <- mean(eng_scot_wales$mean_no2)
# Local and national scaled concentrations
pm25_leicester            <- stack(pm25_leicester,
pm25_leicester/eng_scot_wales[eng_scot_wales$name == 'Leicester',]$mean_pm25,
pm25_leicester/country_mean_pm25)
pm25_westminster          <- stack(pm25_westminster,
pm25_westminster/eng_scot_wales[eng_scot_wales$name == 'Westminster',]$mean_pm25,
pm25_westminster/country_mean_pm25)
no2_leicester             <- stack(no2_leicester,
no2_leicester/eng_scot_wales[eng_scot_wales$name == 'Leicester',]$mean_no2,
no2_leicester/country_mean_no2)
no2_westminster           <- stack(no2_westminster,
no2_westminster/eng_scot_wales[eng_scot_wales$name == 'Westminster',]$mean_no2,
no2_westminster/country_mean_no2)
names(pm25_leicester)     <- c('pm25', 'relative_local_pm25', 'relative_country_pm25')
names(pm25_westminster)   <- c('pm25', 'relative_local_pm25', 'relative_country_pm25')
names(no2_leicester)      <- c('no2', 'relative_local_no2', 'relative_country_no2')
names(no2_westminster)    <- c('no2', 'relative_local_no2', 'relative_country_no2')
concentrations_url    <- 'https://files.datapress.com/london/dataset/london-atmospheric-emissions-inventory-2013/2017-01-26T18:50:00/4.1.%20Concentrations%20LAEI%202013%20Update.zip'
temp = tempfile()
download.file(concentrations_url, temp, method = 'curl')
unzip(temp, exdir = ".")
no2_2013                      <- raster('4.1. Concentrations LAEI 2013 Update/2013/ASCII/PostLAEI2013_2013_NO2.asc')
proj4string(no2_2013)         <- CRS(ukgrid)
pm25_2013                      <- raster('4.1. Concentrations LAEI 2013 Update/2013/ASCII/PostLAEI2013_2013_PM25.asc')
proj4string(pm25_2013)         <- CRS(ukgrid)
london                        <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/london_boroughs.geojson')
london                        <- as(london, 'Spatial')
london                        <- spTransform(london, ukgrid)
westminster                   <- london[london$NAME == 'Westminster',]
rm(london)
pm25_westminster_laei          <- crop(pm25_2013, westminster)
pm25_westminster_laei         <- mask(pm25_westminster_laei, westminster)
no2_westminster_laei          <- crop(no2_2013,  westminster)
no2_westminster_laei          <- mask(no2_westminster_laei,  westminster)
plot(no2_westminster_laei)
no2_leicester_1km                 <- aggregate(no2_leicester,    fact = 50, method="bilinear")
pm25_leicester_1km                <- aggregate(pm25_leicester,   fact = 50, method="bilinear")
no2_westminster_1km               <- aggregate(no2_westminster,  fact = 50, method="bilinear")
pm25_westminster_1km              <- aggregate(pm25_westminster, fact = 50, method="bilinear")
writeRaster(pm25_leicester,        filename="gis_results/pm25_leicester", overwrite=TRUE, format='EHdr')
writeRaster(pm25_westminster,      filename="gis_results/pm25_westminster", overwrite=TRUE, format='EHdr')
writeRaster(no2_leicester,         filename="gis_results/no2_leicester", overwrite=TRUE, format='EHdr')
writeRaster(no2_westminster,       filename="gis_results/no2_westminster", overwrite=TRUE, format='EHdr')
writeRaster(pm25_leicester_1km,    filename="gis_results/pm25_leicester_1km", overwrite=TRUE, format='EHdr')
writeRaster(pm25_westminster_1km,  filename="gis_results/pm25_westminster_1km", overwrite=TRUE, format='EHdr')
writeRaster(no2_leicester_1km,     filename="gis_results/no2_leicester_1km", overwrite=TRUE, format='EHdr')
writeRaster(no2_westminster_1km,   filename="gis_results/no2_westminster_1km", overwrite=TRUE, format='EHdr')
writeRaster(pm25_westminster_laei,   filename="gis_results/pm25_westminster_laei", overwrite=TRUE, format='EHdr')
writeRaster(no2_westminster_laei,   filename="gis_results/no2_westminster_laei", overwrite=TRUE, format='EHdr')
no2_westminster_laei <- raster('gis_results/no2_westminster_laei')
no2_laei2013_breaks  <- as.numeric(c(round(cellStats(no2_westminster_laei, stat=min)-1,4),format(round(quantile(no2_westminster_laei, seq(0,1,length.out = 15)),4), scientific=F), round(cellStats(no2_westminster_laei, stat=max)+1,4))) #17
no2_laei2013_labels  <- c("", paste(no2_laei2013_breaks[1:length(no2_laei2013_breaks)-1], "-",
no2_laei2013_breaks[2:length(no2_laei2013_breaks)])) #17 (same as breaks)
png('png_outputs/no2_westminster_laei.png', width = 10, height = 8, units = 'in', res = 300)
levelplot(no2_westminster_laei,
maxpixels = no2_westminster_laei@ncols/2 * no2_westminster_laei@nrows/2,
margin = FALSE,
colorkey = list(
at = seq(min(no2_laei2013_breaks), max(no2_laei2013_breaks), length = length(no2_laei2013_breaks)),
space = 'right',
labels = list(at=seq(min(no2_laei2013_breaks), max(no2_laei2013_breaks), length = length(no2_laei2013_breaks)),
labels = paste(" \n \n ",no2_laei2013_labels),
font = 1,
cex = 1.5)
),
par.settings = list(
axis.line =list( col = 'transparent')
),
scales = list(draw = FALSE),
col.regions = no2_laei2013_colours,
at = no2_laei2013_breaks)
dev.off()
library(rasterVis)
no2_westminster_laei <- raster('gis_results/no2_westminster_laei')
no2_laei2013_breaks  <- as.numeric(c(round(cellStats(no2_westminster_laei, stat=min)-1,4),format(round(quantile(no2_westminster_laei, seq(0,1,length.out = 15)),4), scientific=F), round(cellStats(no2_westminster_laei, stat=max)+1,4))) #17
no2_laei2013_labels  <- c("", paste(no2_laei2013_breaks[1:length(no2_laei2013_breaks)-1], "-",
no2_laei2013_breaks[2:length(no2_laei2013_breaks)])) #17 (same as breaks)
png('png_outputs/no2_westminster_laei.png', width = 10, height = 8, units = 'in', res = 300)
levelplot(no2_westminster_laei,
maxpixels = no2_westminster_laei@ncols/2 * no2_westminster_laei@nrows/2,
margin = FALSE,
colorkey = list(
at = seq(min(no2_laei2013_breaks), max(no2_laei2013_breaks), length = length(no2_laei2013_breaks)),
space = 'right',
labels = list(at=seq(min(no2_laei2013_breaks), max(no2_laei2013_breaks), length = length(no2_laei2013_breaks)),
labels = paste(" \n \n ",no2_laei2013_labels),
font = 1,
cex = 1.5)
),
par.settings = list(
axis.line =list( col = 'transparent')
),
scales = list(draw = FALSE),
col.regions = no2_laei2013_colours,
at = no2_laei2013_breaks)
dev.off()
#no2_colours
source('https://raw.githubusercontent.com/KCL-ERG/colour_schemes/master/no2_laei2013_colours_breaks.R')
source('https://raw.githubusercontent.com/KCL-ERG/colour_schemes/master/pm25_laei2013_colours_breaks.R')
no2_westminster_laei <- raster('gis_results/no2_westminster_laei')
no2_laei2013_breaks  <- as.numeric(c(round(cellStats(no2_westminster_laei, stat=min)-1,4),format(round(quantile(no2_westminster_laei, seq(0,1,length.out = 15)),4), scientific=F), round(cellStats(no2_westminster_laei, stat=max)+1,4))) #17
no2_laei2013_labels  <- c("", paste(no2_laei2013_breaks[1:length(no2_laei2013_breaks)-1], "-",
no2_laei2013_breaks[2:length(no2_laei2013_breaks)])) #17 (same as breaks)
png('png_outputs/no2_westminster_laei.png', width = 10, height = 8, units = 'in', res = 300)
levelplot(no2_westminster_laei,
maxpixels = no2_westminster_laei@ncols/2 * no2_westminster_laei@nrows/2,
margin = FALSE,
colorkey = list(
at = seq(min(no2_laei2013_breaks), max(no2_laei2013_breaks), length = length(no2_laei2013_breaks)),
space = 'right',
labels = list(at=seq(min(no2_laei2013_breaks), max(no2_laei2013_breaks), length = length(no2_laei2013_breaks)),
labels = paste(" \n \n ",no2_laei2013_labels),
font = 1,
cex = 1.5)
),
par.settings = list(
axis.line =list( col = 'transparent')
),
scales = list(draw = FALSE),
col.regions = no2_laei2013_colours,
at = no2_laei2013_breaks)
dev.off()
no2_westminster_laei <- raster('gis_results/no2_westminster_laei')
no2_laei2013_breaks  <- as.numeric(c(round(cellStats(no2_westminster_laei, stat=min)-1,4),format(round(quantile(no2_westminster_laei, seq(0,1,length.out = 15)),4), scientific=F), round(cellStats(no2_westminster_laei, stat=max)+1,4))) #17
no2_laei2013_labels  <- c("", paste(no2_laei2013_breaks[1:length(no2_laei2013_breaks)-1], "-",
no2_laei2013_breaks[2:length(no2_laei2013_breaks)])) #17 (same as breaks)
no2_westminster_laei
plot(no2_westminster_laei)
no2_westminster_laei
plot(no2_westminster_laei)
no2_westminster_laei <- raster('gis_results/no2_westminster_laei')
rm(list=ls())
### Loading libraries
library(raster)
library(rgdal)
library(rgeos)
library(ggplot2)
library(sf)
library(rmarkdown)
setwd('/home/james/github/uk_cmaq_air_quality_index')
latlong                   <- "+init=epsg:4326"
ukgrid                    <- "+init=epsg:27700"
google                    <- "+init=epsg:3857"
eng_scot_wales <- st_read('eng_scot_wales_conc_averages.geojson')
eng_scot_wales <- st_set_crs(eng_scot_wales, proj4string(pm25))
## read in the raster files and UK shapefile
pm25                      <- raster('cmaq_runs/Annual_CMAQUrban_PM25_2012.grd')
## Copy maps over from cluster2
system('sshpass -f "../cluster2password.txt" scp james@10.0.4.225:/mnt/modelling2/UKmaps20m/* cmaq_runs/')
## read in the raster files and UK shapefile
pm25                      <- raster('cmaq_runs/Annual_CMAQUrban_PM25_2012.grd')
eng_scot_wales <- st_set_crs(eng_scot_wales, proj4string(pm25))
## Our two examples
leicester                 <- as(eng_scot_wales[eng_scot_wales$name == 'Leicester',], 'Spatial')
westminster               <- as(eng_scot_wales[eng_scot_wales$name == 'Westminster',], 'Spatial')
no2_2013                      <- raster('4.1. Concentrations LAEI 2013 Update/2013/ASCII/PostLAEI2013_2013_NO2.asc')
# Get LAEI for comparison
concentrations_url    <- 'https://files.datapress.com/london/dataset/london-atmospheric-emissions-inventory-2013/2017-01-26T18:50:00/4.1.%20Concentrations%20LAEI%202013%20Update.zip'
temp = tempfile()
download.file(concentrations_url, temp, method = 'curl')
unzip(temp, exdir = ".")
no2_2013                      <- raster('4.1. Concentrations LAEI 2013 Update/2013/ASCII/PostLAEI2013_2013_NO2.asc')
proj4string(no2_2013)         <- CRS(ukgrid)
pm25_2013                      <- raster('4.1. Concentrations LAEI 2013 Update/2013/ASCII/PostLAEI2013_2013_PM25.asc')
proj4string(pm25_2013)         <- CRS(ukgrid)
london                        <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/london_boroughs.geojson')
london                        <- as(london, 'Spatial')
london                        <- spTransform(london, ukgrid)
london[london$NAME == 'Westminster',]
westminster                   <- london[london$NAME == 'Westminster',]
rm(london)
pm25_westminster_laei         <- crop(pm25_2013, westminster)
pm25_westminster_laei         <- mask(pm25_westminster_laei, westminster)
no2_westminster_laei          <- crop(no2_2013,  westminster)
no2_westminster_laei          <- mask(no2_westminster_laei,  westminster)
plot(no2_westminster_laei)
writeRaster(pm25_westminster_laei,   filename="gis_results/pm25_westminster_laei", overwrite=TRUE, format='EHdr')
writeRaster(no2_westminster_laei,   filename="gis_results/no2_westminster_laei", overwrite=TRUE, format='EHdr')
no2_westminster_laei <- raster('gis_results/no2_westminster_laei')
#no2_colours
source('https://raw.githubusercontent.com/KCL-ERG/colour_schemes/master/no2_laei2013_colours_breaks.R')
source('https://raw.githubusercontent.com/KCL-ERG/colour_schemes/master/pm25_laei2013_colours_breaks.R')
no2_westminster_laei <- raster('gis_results/no2_westminster_laei')
no2_laei2013_breaks  <- as.numeric(c(round(cellStats(no2_westminster_laei, stat=min)-1,4),format(round(quantile(no2_westminster_laei, seq(0,1,length.out = 15)),4), scientific=F), round(cellStats(no2_westminster_laei, stat=max)+1,4))) #17
no2_laei2013_labels  <- c("", paste(no2_laei2013_breaks[1:length(no2_laei2013_breaks)-1], "-",
no2_laei2013_breaks[2:length(no2_laei2013_breaks)])) #17 (same as breaks)
levelplot(no2_westminster_laei,
maxpixels = no2_westminster_laei@ncols/2 * no2_westminster_laei@nrows/2,
margin = FALSE,
colorkey = list(
at = seq(min(no2_laei2013_breaks), max(no2_laei2013_breaks), length = length(no2_laei2013_breaks)),
space = 'right',
labels = list(at=seq(min(no2_laei2013_breaks), max(no2_laei2013_breaks), length = length(no2_laei2013_breaks)),
labels = paste(" \n \n ",no2_laei2013_labels),
font = 1,
cex = 1.5)
),
par.settings = list(
axis.line =list( col = 'transparent')
),
scales = list(draw = FALSE),
col.regions = no2_laei2013_colours,
at = no2_laei2013_breaks)
png('png_outputs/no2_westminster_laei.png', width = 10, height = 8, units = 'in', res = 300)
levelplot(no2_westminster_laei,
maxpixels = no2_westminster_laei@ncols/2 * no2_westminster_laei@nrows/2,
margin = FALSE,
colorkey = list(
at = seq(min(no2_laei2013_breaks), max(no2_laei2013_breaks), length = length(no2_laei2013_breaks)),
space = 'right',
labels = list(at=seq(min(no2_laei2013_breaks), max(no2_laei2013_breaks), length = length(no2_laei2013_breaks)),
labels = paste(" \n \n ",no2_laei2013_labels),
font = 1,
cex = 1.5)
),
par.settings = list(
axis.line =list( col = 'transparent')
),
scales = list(draw = FALSE),
col.regions = no2_laei2013_colours,
at = no2_laei2013_breaks)
dev.off()
### Remove files from folder that are big
system('rm cmaq_runs/*.gri')
system('rm cmaq_runs/*.grd')
